
Lumi_Test_Communicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf0  08000190  08000190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e80  08000e88  00010e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e80  08000e80  00010e88  2**0
                  CONTENTS
  4 .ARM          00000000  08000e80  08000e80  00010e88  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e80  08000e88  00010e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e80  08000e80  00010e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e84  08000e84  00010e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000e88  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000e88  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010e88  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000561e  00000000  00000000  00010eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172d  00000000  00000000  000164d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  00017c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000570  00000000  00000000  00018250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bee3  00000000  00000000  000187c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000065d3  00000000  00000000  000246a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000401ba  00000000  00000000  0002ac76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006ae30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001880  00000000  00000000  0006ae84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08000e68 	.word	0x08000e68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	08000e68 	.word	0x08000e68

080001d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d4:	4b16      	ldr	r3, [pc, #88]	; (8000230 <SystemInit+0x60>)
 80001d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001da:	4a15      	ldr	r2, [pc, #84]	; (8000230 <SystemInit+0x60>)
 80001dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <SystemInit+0x64>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <SystemInit+0x64>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <SystemInit+0x64>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <SystemInit+0x64>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <SystemInit+0x64>)
 80001fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000204:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000206:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <SystemInit+0x64>)
 8000208:	4a0b      	ldr	r2, [pc, #44]	; (8000238 <SystemInit+0x68>)
 800020a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <SystemInit+0x64>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a08      	ldr	r2, [pc, #32]	; (8000234 <SystemInit+0x64>)
 8000212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000216:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <SystemInit+0x64>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800021e:	f000 f80d 	bl	800023c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000222:	4b03      	ldr	r3, [pc, #12]	; (8000230 <SystemInit+0x60>)
 8000224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000228:	609a      	str	r2, [r3, #8]
#endif
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	e000ed00 	.word	0xe000ed00
 8000234:	40023800 	.word	0x40023800
 8000238:	24003010 	.word	0x24003010

0800023c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000240:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <SetSysClock+0x94>)
 8000242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000244:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <SetSysClock+0x94>)
 8000246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800024a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <SetSysClock+0x98>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a20      	ldr	r2, [pc, #128]	; (80002d4 <SetSysClock+0x98>)
 8000252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000256:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000258:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <SetSysClock+0x94>)
 800025a:	4a1d      	ldr	r2, [pc, #116]	; (80002d0 <SetSysClock+0x94>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <SetSysClock+0x94>)
 8000262:	4a1b      	ldr	r2, [pc, #108]	; (80002d0 <SetSysClock+0x94>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000268:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <SetSysClock+0x94>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a18      	ldr	r2, [pc, #96]	; (80002d0 <SetSysClock+0x94>)
 800026e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000272:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <SetSysClock+0x94>)
 8000276:	4a18      	ldr	r2, [pc, #96]	; (80002d8 <SetSysClock+0x9c>)
 8000278:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <SetSysClock+0x94>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <SetSysClock+0x94>)
 8000280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000284:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000286:	bf00      	nop
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <SetSysClock+0x94>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000290:	2b00      	cmp	r3, #0
 8000292:	d0f9      	beq.n	8000288 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <SetSysClock+0xa0>)
 8000296:	f240 6202 	movw	r2, #1538	; 0x602
 800029a:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <SetSysClock+0x94>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <SetSysClock+0x94>)
 80002a2:	f023 0303 	bic.w	r3, r3, #3
 80002a6:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <SetSysClock+0x94>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <SetSysClock+0x94>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002b4:	bf00      	nop
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <SetSysClock+0x94>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f003 030c 	and.w	r3, r3, #12
 80002be:	2b08      	cmp	r3, #8
 80002c0:	d1f9      	bne.n	80002b6 <SetSysClock+0x7a>
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40007000 	.word	0x40007000
 80002d8:	08015410 	.word	0x08015410
 80002dc:	40023c00 	.word	0x40023c00

080002e0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80002e8:	2300      	movs	r3, #0
 80002ea:	73fb      	strb	r3, [r7, #15]
 80002ec:	2300      	movs	r3, #0
 80002ee:	73bb      	strb	r3, [r7, #14]
 80002f0:	230f      	movs	r3, #15
 80002f2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	78db      	ldrb	r3, [r3, #3]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d039      	beq.n	8000370 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80002fc:	4b27      	ldr	r3, [pc, #156]	; (800039c <NVIC_Init+0xbc>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	43db      	mvns	r3, r3
 8000302:	0a1b      	lsrs	r3, r3, #8
 8000304:	b2db      	uxtb	r3, r3
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800030c:	7bfb      	ldrb	r3, [r7, #15]
 800030e:	f1c3 0304 	rsb	r3, r3, #4
 8000312:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000314:	7b7a      	ldrb	r2, [r7, #13]
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	fa42 f303 	asr.w	r3, r2, r3
 800031c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	785b      	ldrb	r3, [r3, #1]
 8000322:	461a      	mov	r2, r3
 8000324:	7bbb      	ldrb	r3, [r7, #14]
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	789a      	ldrb	r2, [r3, #2]
 8000330:	7b7b      	ldrb	r3, [r7, #13]
 8000332:	4013      	ands	r3, r2
 8000334:	b2da      	uxtb	r2, r3
 8000336:	7bfb      	ldrb	r3, [r7, #15]
 8000338:	4313      	orrs	r3, r2
 800033a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	011b      	lsls	r3, r3, #4
 8000340:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000342:	4a17      	ldr	r2, [pc, #92]	; (80003a0 <NVIC_Init+0xc0>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4413      	add	r3, r2
 800034a:	7bfa      	ldrb	r2, [r7, #15]
 800034c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000358:	4911      	ldr	r1, [pc, #68]	; (80003a0 <NVIC_Init+0xc0>)
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	0952      	lsrs	r2, r2, #5
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000364:	2201      	movs	r2, #1
 8000366:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800036a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800036e:	e00f      	b.n	8000390 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000378:	4909      	ldr	r1, [pc, #36]	; (80003a0 <NVIC_Init+0xc0>)
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	7812      	ldrb	r2, [r2, #0]
 800037e:	0952      	lsrs	r2, r2, #5
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000384:	2201      	movs	r2, #1
 8000386:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000388:	f100 0320 	add.w	r3, r0, #32
 800038c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00
 80003a0:	e000e100 	.word	0xe000e100

080003a4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80003b0:	4b34      	ldr	r3, [pc, #208]	; (8000484 <EXTI_Init+0xe0>)
 80003b2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	799b      	ldrb	r3, [r3, #6]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d04f      	beq.n	800045c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <EXTI_Init+0xe0>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	43db      	mvns	r3, r3
 80003c6:	492f      	ldr	r1, [pc, #188]	; (8000484 <EXTI_Init+0xe0>)
 80003c8:	4013      	ands	r3, r2
 80003ca:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80003cc:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <EXTI_Init+0xe0>)
 80003ce:	685a      	ldr	r2, [r3, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	43db      	mvns	r3, r3
 80003d6:	492b      	ldr	r1, [pc, #172]	; (8000484 <EXTI_Init+0xe0>)
 80003d8:	4013      	ands	r3, r2
 80003da:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	791b      	ldrb	r3, [r3, #4]
 80003e0:	461a      	mov	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	4413      	add	r3, r2
 80003e6:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	6819      	ldr	r1, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	430a      	orrs	r2, r1
 80003f4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <EXTI_Init+0xe0>)
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	43db      	mvns	r3, r3
 8000400:	4920      	ldr	r1, [pc, #128]	; (8000484 <EXTI_Init+0xe0>)
 8000402:	4013      	ands	r3, r2
 8000404:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <EXTI_Init+0xe0>)
 8000408:	68da      	ldr	r2, [r3, #12]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	43db      	mvns	r3, r3
 8000410:	491c      	ldr	r1, [pc, #112]	; (8000484 <EXTI_Init+0xe0>)
 8000412:	4013      	ands	r3, r2
 8000414:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	795b      	ldrb	r3, [r3, #5]
 800041a:	2b10      	cmp	r3, #16
 800041c:	d10e      	bne.n	800043c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <EXTI_Init+0xe0>)
 8000420:	689a      	ldr	r2, [r3, #8]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4917      	ldr	r1, [pc, #92]	; (8000484 <EXTI_Init+0xe0>)
 8000428:	4313      	orrs	r3, r2
 800042a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <EXTI_Init+0xe0>)
 800042e:	68da      	ldr	r2, [r3, #12]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4913      	ldr	r1, [pc, #76]	; (8000484 <EXTI_Init+0xe0>)
 8000436:	4313      	orrs	r3, r2
 8000438:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800043a:	e01d      	b.n	8000478 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <EXTI_Init+0xe0>)
 800043e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	795b      	ldrb	r3, [r3, #5]
 8000444:	461a      	mov	r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	4413      	add	r3, r2
 800044a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	6819      	ldr	r1, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	430a      	orrs	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	e00d      	b.n	8000478 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	461a      	mov	r2, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	4413      	add	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	6819      	ldr	r1, [r3, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	43da      	mvns	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	400a      	ands	r2, r1
 8000476:	601a      	str	r2, [r3, #0]
}
 8000478:	bf00      	nop
 800047a:	3714      	adds	r7, #20
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40013c00 	.word	0x40013c00

08000488 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <EXTI_GetFlagStatus+0x30>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4013      	ands	r3, r2
 800049c:	2b00      	cmp	r3, #0
 800049e:	d002      	beq.n	80004a6 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80004a0:	2301      	movs	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
 80004a4:	e001      	b.n	80004aa <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80004a6:	2300      	movs	r3, #0
 80004a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40013c00 	.word	0x40013c00

080004bc <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <EXTI_GetITStatus+0x30>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4013      	ands	r3, r2
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d002      	beq.n	80004da <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 80004d4:	2301      	movs	r3, #1
 80004d6:	73fb      	strb	r3, [r7, #15]
 80004d8:	e001      	b.n	80004de <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80004da:	2300      	movs	r3, #0
 80004dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
  
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40013c00 	.word	0x40013c00

080004f0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <EXTI_ClearITPendingBit+0x1c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6153      	str	r3, [r2, #20]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40013c00 	.word	0x40013c00

08000510 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e076      	b.n	800061a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800052c:	2201      	movs	r2, #1
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	4013      	ands	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	429a      	cmp	r2, r3
 8000546:	d165      	bne.n	8000614 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	2103      	movs	r1, #3
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	401a      	ands	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	4619      	mov	r1, r3
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	fa01 f303 	lsl.w	r3, r1, r3
 8000570:	431a      	orrs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d003      	beq.n	8000586 <GPIO_Init+0x76>
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	2b02      	cmp	r3, #2
 8000584:	d12e      	bne.n	80005e4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689a      	ldr	r2, [r3, #8]
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	4619      	mov	r1, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	2301      	movs	r3, #1
 80005c0:	408b      	lsls	r3, r1
 80005c2:	43db      	mvns	r3, r3
 80005c4:	401a      	ands	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	7992      	ldrb	r2, [r2, #6]
 80005d2:	4611      	mov	r1, r2
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	b292      	uxth	r2, r2
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	b292      	uxth	r2, r2
 80005de:	431a      	orrs	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2103      	movs	r1, #3
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	401a      	ands	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68da      	ldr	r2, [r3, #12]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	79db      	ldrb	r3, [r3, #7]
 8000604:	4619      	mov	r1, r3
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	431a      	orrs	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d985      	bls.n	800052c <GPIO_Init+0x1c>
    }
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	371c      	adds	r7, #28
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800062e:	b480      	push	{r7}
 8000630:	b085      	sub	sp, #20
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	691a      	ldr	r2, [r3, #16]
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	4013      	ands	r3, r2
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800064a:	2301      	movs	r3, #1
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	e001      	b.n	8000654 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	887a      	ldrh	r2, [r7, #2]
 8000672:	831a      	strh	r2, [r3, #24]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	887a      	ldrh	r2, [r7, #2]
 8000690:	835a      	strh	r2, [r3, #26]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80006b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006be:	e006      	b.n	80006ce <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80006c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4904      	ldr	r1, [pc, #16]	; (80006dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d006      	beq.n	8000700 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <RCC_APB2PeriphClockCmd+0x3c>)
 80006f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006f6:	4909      	ldr	r1, [pc, #36]	; (800071c <RCC_APB2PeriphClockCmd+0x3c>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006fe:	e006      	b.n	800070e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <RCC_APB2PeriphClockCmd+0x3c>)
 8000702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	43db      	mvns	r3, r3
 8000708:	4904      	ldr	r1, [pc, #16]	; (800071c <RCC_APB2PeriphClockCmd+0x3c>)
 800070a:	4013      	ands	r3, r2
 800070c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	f003 0303 	and.w	r3, r3, #3
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	220f      	movs	r2, #15
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000744:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <SYSCFG_EXTILineConfig+0x80>)
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	089b      	lsrs	r3, r3, #2
 800074a:	b2db      	uxtb	r3, r3
 800074c:	3302      	adds	r3, #2
 800074e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	43db      	mvns	r3, r3
 8000756:	4812      	ldr	r0, [pc, #72]	; (80007a0 <SYSCFG_EXTILineConfig+0x80>)
 8000758:	79b9      	ldrb	r1, [r7, #6]
 800075a:	0889      	lsrs	r1, r1, #2
 800075c:	b2c9      	uxtb	r1, r1
 800075e:	401a      	ands	r2, r3
 8000760:	1c8b      	adds	r3, r1, #2
 8000762:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <SYSCFG_EXTILineConfig+0x80>)
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	089b      	lsrs	r3, r3, #2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	3302      	adds	r3, #2
 8000770:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000774:	79f9      	ldrb	r1, [r7, #7]
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <SYSCFG_EXTILineConfig+0x80>)
 8000784:	79b9      	ldrb	r1, [r7, #6]
 8000786:	0889      	lsrs	r1, r1, #2
 8000788:	b2c9      	uxtb	r1, r1
 800078a:	431a      	orrs	r2, r3
 800078c:	1c8b      	adds	r3, r1, #2
 800078e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40013800 	.word	0x40013800

080007a4 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007b6:	b29b      	uxth	r3, r3
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b087      	sub	sp, #28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	095b      	lsrs	r3, r3, #5
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	f003 031f 	and.w	r3, r3, #31
 80007f0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80007f2:	2201      	movs	r2, #1
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d107      	bne.n	8000812 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	899b      	ldrh	r3, [r3, #12]
 8000806:	b29b      	uxth	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	4013      	ands	r3, r2
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e011      	b.n	8000836 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d107      	bne.n	8000828 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8a1b      	ldrh	r3, [r3, #16]
 800081c:	b29b      	uxth	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	4013      	ands	r3, r2
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	e006      	b.n	8000836 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	8a9b      	ldrh	r3, [r3, #20]
 800082c:	b29b      	uxth	r3, r3
 800082e:	461a      	mov	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4013      	ands	r3, r2
 8000834:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000836:	887b      	ldrh	r3, [r7, #2]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800083e:	2201      	movs	r2, #1
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4013      	ands	r3, r2
 8000854:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d005      	beq.n	8000868 <USART_GetITStatus+0xa4>
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000862:	2301      	movs	r3, #1
 8000864:	74fb      	strb	r3, [r7, #19]
 8000866:	e001      	b.n	800086c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800086c:	7cfb      	ldrb	r3, [r7, #19]
}
 800086e:	4618      	mov	r0, r3
 8000870:	371c      	adds	r7, #28
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800087a:	b480      	push	{r7}
 800087c:	b085      	sub	sp, #20
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000886:	2300      	movs	r3, #0
 8000888:	81fb      	strh	r3, [r7, #14]
 800088a:	2300      	movs	r3, #0
 800088c:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800088e:	887b      	ldrh	r3, [r7, #2]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	2201      	movs	r2, #1
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	43db      	mvns	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	801a      	strh	r2, [r3, #0]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <buttonStart>:
 * @func   buttonStart
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
void buttonStart(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port A;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80008ba:	2101      	movs	r1, #1
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff feef 	bl	80006a0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80008c2:	2300      	movs	r3, #0
 80008c4:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_START;
 80008c6:	2310      	movs	r3, #16
 80008c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008ca:	2302      	movs	r3, #2
 80008cc:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(BUTTON_GPIO_PORTA, &GPIO_InitStructure);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	4814      	ldr	r0, [pc, #80]	; (800092c <buttonStart+0x78>)
 80008da:	f7ff fe19 	bl	8000510 <GPIO_Init>

//  Enable Clock Syscfg, Connect EXTI Line 4 to PA4 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);
 80008de:	2101      	movs	r1, #1
 80008e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008e4:	f7ff fefc 	bl	80006e0 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource4);
 80008e8:	2104      	movs	r1, #4
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff ff18 	bl	8000720 <SYSCFG_EXTILineConfig>

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line4;
 80008f0:	2310      	movs	r3, #16
 80008f2:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80008f4:	2300      	movs	r3, #0
 80008f6:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 80008f8:	2310      	movs	r3, #16
 80008fa:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fd4d 	bl	80003a4 <EXTI_Init>

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
 800090a:	230a      	movs	r3, #10
 800090c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
 800090e:	2301      	movs	r3, #1
 8000910:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 8000912:	2301      	movs	r3, #1
 8000914:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000916:	2301      	movs	r3, #1
 8000918:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fcdf 	bl	80002e0 <NVIC_Init>
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40020000 	.word	0x40020000

08000930 <buttonTest>:
 * @func   buttonTest
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
void buttonTest(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port A;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000936:	2101      	movs	r1, #1
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff feb1 	bl	80006a0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800093e:	2300      	movs	r3, #0
 8000940:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_TEST;
 8000942:	2320      	movs	r3, #32
 8000944:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000946:	2302      	movs	r3, #2
 8000948:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800094a:	2301      	movs	r3, #1
 800094c:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(BUTTON_GPIO_PORTA, &GPIO_InitStructure);
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4619      	mov	r1, r3
 8000954:	4814      	ldr	r0, [pc, #80]	; (80009a8 <buttonTest+0x78>)
 8000956:	f7ff fddb 	bl	8000510 <GPIO_Init>

//  Enable Clock Syscfg, Connect EXTI Line 5 to PA5 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);
 800095a:	2101      	movs	r1, #1
 800095c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000960:	f7ff febe 	bl	80006e0 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource5);
 8000964:	2105      	movs	r1, #5
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff feda 	bl	8000720 <SYSCFG_EXTILineConfig>

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line5;
 800096c:	2320      	movs	r3, #32
 800096e:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000970:	2300      	movs	r3, #0
 8000972:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000974:	2310      	movs	r3, #16
 8000976:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000978:	2301      	movs	r3, #1
 800097a:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fd0f 	bl	80003a4 <EXTI_Init>

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000986:	2317      	movs	r3, #23
 8000988:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 800098a:	2302      	movs	r3, #2
 800098c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;
 800098e:	2302      	movs	r3, #2
 8000990:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000992:	2301      	movs	r3, #1
 8000994:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fca1 	bl	80002e0 <NVIC_Init>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40020000 	.word	0x40020000

080009ac <buttonRayIn>:
 * @func   buttonRayIn
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
void buttonRayIn(void) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port A;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80009b2:	2101      	movs	r1, #1
 80009b4:	2001      	movs	r0, #1
 80009b6:	f7ff fe73 	bl	80006a0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80009ba:	2300      	movs	r3, #0
 80009bc:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_RAY_IN;
 80009be:	2340      	movs	r3, #64	; 0x40
 80009c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80009c2:	2302      	movs	r3, #2
 80009c4:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(BUTTON_GPIO_PORTA, &GPIO_InitStructure);
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	4814      	ldr	r0, [pc, #80]	; (8000a24 <buttonRayIn+0x78>)
 80009d2:	f7ff fd9d 	bl	8000510 <GPIO_Init>

//  Enable Clock Syscfg, Connect EXTI Line 6 to PA6 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);
 80009d6:	2101      	movs	r1, #1
 80009d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009dc:	f7ff fe80 	bl	80006e0 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource6);
 80009e0:	2106      	movs	r1, #6
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fe9c 	bl	8000720 <SYSCFG_EXTILineConfig>

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line6;
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80009ec:	2300      	movs	r3, #0
 80009ee:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 80009f0:	2310      	movs	r3, #16
 80009f2:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fcd1 	bl	80003a4 <EXTI_Init>

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000a02:	2317      	movs	r3, #23
 8000a04:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x03;
 8000a06:	2303      	movs	r3, #3
 8000a08:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fc63 	bl	80002e0 <NVIC_Init>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40020000 	.word	0x40020000

08000a28 <buttonRayOut>:
 * @func   buttonRayOut
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
void buttonRayOut(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port A;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000a2e:	2101      	movs	r1, #1
 8000a30:	2002      	movs	r0, #2
 8000a32:	f7ff fe35 	bl	80006a0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000a36:	2300      	movs	r3, #0
 8000a38:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTON_RAY_OUT;
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(BUTTON_GPIO_PORTB, &GPIO_InitStructure);
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <buttonRayOut+0x78>)
 8000a4e:	f7ff fd5f 	bl	8000510 <GPIO_Init>

//  Enable Clock Syscfg, Connect EXTI Line 7 to PA7 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);
 8000a52:	2101      	movs	r1, #1
 8000a54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a58:	f7ff fe42 	bl	80006e0 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource7);
 8000a5c:	2107      	movs	r1, #7
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fe5e 	bl	8000720 <SYSCFG_EXTILineConfig>

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line7;
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fc93 	bl	80003a4 <EXTI_Init>

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000a7e:	2317      	movs	r3, #23
 8000a80:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x04;
 8000a82:	2304      	movs	r3, #4
 8000a84:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x04;
 8000a86:	2304      	movs	r3, #4
 8000a88:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fc25 	bl	80002e0 <NVIC_Init>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <LED_Init>:

/******************************************************************************/


void LED_Init (void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(LED_PORTC_SET_CLOCK | LED_PORTC_SET_CLOCK, ENABLE);
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2004      	movs	r0, #4
 8000aae:	f7ff fdf7 	bl	80006a0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = LED_1_PIN | LED_2_PIN |
 8000ab2:	f641 6301 	movw	r3, #7681	; 0x1e01
 8000ab6:	603b      	str	r3, [r7, #0]
								  LED_3_PIN | LED_4_PIN | LED_6_PIN | LED_5_PIN;

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	713b      	strb	r3, [r7, #4]

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000abc:	2302      	movs	r3, #2
 8000abe:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_OType =  GPIO_OType_PP;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	71bb      	strb	r3, [r7, #6]

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(LED_1_2_3_4_6_PORT, &GPIO_InitStructure);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <LED_Init+0x40>)
 8000ace:	f7ff fd1f 	bl	8000510 <GPIO_Init>
	GPIO_Init(LED_5_PORT, &GPIO_InitStructure);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <LED_Init+0x44>)
 8000ad8:	f7ff fd1a 	bl	8000510 <GPIO_Init>

}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020000 	.word	0x40020000

08000aec <BlinkLed>:
 * @brief  set status buzzer
 * @param  None
 * @retval None
 */
void BlinkLed(GPIO_TypeDef *GPIOx, u16_t GPIO_PIN,
		u32_t dwNumber) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	460b      	mov	r3, r1
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	817b      	strh	r3, [r7, #10]
	for (u32_t i = 0; i < dwNumber; i++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e012      	b.n	8000b26 <BlinkLed+0x3a>
		GPIO_SetBits(GPIOx, GPIO_PIN);
 8000b00:	897b      	ldrh	r3, [r7, #10]
 8000b02:	4619      	mov	r1, r3
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff fdac 	bl	8000662 <GPIO_SetBits>
		delay_ms(200);
 8000b0a:	20c8      	movs	r0, #200	; 0xc8
 8000b0c:	f000 f814 	bl	8000b38 <delay_ms>
		GPIO_ResetBits(GPIOx, GPIO_PIN);
 8000b10:	897b      	ldrh	r3, [r7, #10]
 8000b12:	4619      	mov	r1, r3
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fdb3 	bl	8000680 <GPIO_ResetBits>
		delay_ms(200);
 8000b1a:	20c8      	movs	r0, #200	; 0xc8
 8000b1c:	f000 f80c 	bl	8000b38 <delay_ms>
	for (u32_t i = 0; i < dwNumber; i++) {
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d3e8      	bcc.n	8000b00 <BlinkLed+0x14>
	}
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <delay_ms>:
 * @func   delay_ms
 * @brief  delay milisecon
 * @param  None
 * @retval None
 */
void delay_ms(u32_t dwMilisecond) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

	u32_t dwStartTime = GetMilSecTick(); //Lưu lại thời điểm hiện tại.
 8000b40:	f000 f82c 	bl	8000b9c <GetMilSecTick>
 8000b44:	60f8      	str	r0, [r7, #12]
	while (CalculatorTime(dwStartTime, GetMilSecTick()) <= dwMilisecond);
 8000b46:	bf00      	nop
 8000b48:	f000 f828 	bl	8000b9c <GetMilSecTick>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4619      	mov	r1, r3
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f809 	bl	8000b68 <CalculatorTime>
 8000b56:	4602      	mov	r2, r0
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d2f4      	bcs.n	8000b48 <delay_ms+0x10>

//	Đợi cho đến khi hết khoảng time cài đặt

}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <CalculatorTime>:
 * @brief  Caculator time button
 * @param  None
 * @retval None
 */

static u32_t CalculatorTime(u32_t dwTimeInit, u32_t dwTimeCurrent) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	u32_t dwTimeTotal;
	if (dwTimeCurrent >= dwTimeInit) {
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d304      	bcc.n	8000b84 <CalculatorTime+0x1c>
		dwTimeTotal = dwTimeCurrent - dwTimeInit;
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e004      	b.n	8000b8e <CalculatorTime+0x26>
	} else {
		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
	}
	return dwTimeTotal;
 8000b8e:	68fb      	ldr	r3, [r7, #12]

}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <GetMilSecTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2000001c 	.word	0x2000001c

08000bb4 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <SysTick_Handler+0x18>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <SysTick_Handler+0x18>)
 8000bc0:	6013      	str	r3, [r2, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	2000001c 	.word	0x2000001c

08000bd0 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd6:	b672      	cpsid	i
}
 8000bd8:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000bda:	f240 5125 	movw	r1, #1317	; 0x525
 8000bde:	480f      	ldr	r0, [pc, #60]	; (8000c1c <USART2_IRQHandler+0x4c>)
 8000be0:	f7ff fdf0 	bl	80007c4 <USART_GetITStatus>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d112      	bne.n	8000c10 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <USART2_IRQHandler+0x50>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <USART2_IRQHandler+0x4c>)
 8000bf2:	f7ff fdd7 	bl	80007a4 <USART_ReceiveData>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000bfc:	1cfb      	adds	r3, r7, #3
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f822 	bl	8000c4a <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000c06:	f240 5125 	movw	r1, #1317	; 0x525
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <USART2_IRQHandler+0x4c>)
 8000c0c:	f7ff fe35 	bl	800087a <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c10:	b662      	cpsie	i
}
 8000c12:	bf00      	nop
    }
    __enable_irq();
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	20000020 	.word	0x20000020

08000c24 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	885a      	ldrh	r2, [r3, #2]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	bf2c      	ite	cs
 8000c38:	2301      	movcs	r3, #1
 8000c3a:	2300      	movcc	r3, #0
 8000c3c:	b2db      	uxtb	r3, r3
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e021      	b.n	8000ca2 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	441a      	add	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	88c9      	ldrh	r1, [r1, #6]
 8000c6c:	440b      	add	r3, r1
 8000c6e:	7812      	ldrb	r2, [r2, #0]
 8000c70:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	88db      	ldrh	r3, [r3, #6]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4013      	ands	r3, r2
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	885b      	ldrh	r3, [r3, #2]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	791b      	ldrb	r3, [r3, #4]
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d3d8      	bcc.n	8000c5e <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ffb9 	bl	8000c24 <bufIsFull>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d011      	beq.n	8000cdc <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	891a      	ldrh	r2, [r3, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	791b      	ldrb	r3, [r3, #4]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cdc:	b662      	cpsie	i
}
 8000cde:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <main>:
/******************************************************************************/



int main(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
	AppCommonInit();
 8000cee:	f000 f801 	bl	8000cf4 <AppCommonInit>

    /* Loop forever */
	while(1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0x8>

08000cf4 <AppCommonInit>:

	}
}

static void AppCommonInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	LED_Init();
 8000cf8:	f7ff fed4 	bl	8000aa4 <LED_Init>
	buttonStart();
 8000cfc:	f7ff fdda 	bl	80008b4 <buttonStart>
	buttonTest();
 8000d00:	f7ff fe16 	bl	8000930 <buttonTest>
	buttonRayIn();
 8000d04:	f7ff fe52 	bl	80009ac <buttonRayIn>
	buttonRayOut();
 8000d08:	f7ff fe8e 	bl	8000a28 <buttonRayOut>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <EXTI4_IRQHandler>:
 * @func   EXTI4_IRQHandler
 * @brief  Interrupt line 4
 * @param  None
 * @retval None
 */
void EXTI4_IRQHandler(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

	if (EXTI_GetFlagStatus(EXTI_Line4) == SET)
 8000d14:	2010      	movs	r0, #16
 8000d16:	f7ff fbb7 	bl	8000488 <EXTI_GetFlagStatus>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d10f      	bne.n	8000d40 <EXTI4_IRQHandler+0x30>
	{
		if (GPIO_ReadInputDataBit(BUTTON_GPIO_PORTA,BUTTON_START)== GPIO_PIN_RESET) {
 8000d20:	2110      	movs	r1, #16
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <EXTI4_IRQHandler+0x34>)
 8000d24:	f7ff fc83 	bl	800062e <GPIO_ReadInputDataBit>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d105      	bne.n	8000d3a <EXTI4_IRQHandler+0x2a>
			BlinkLed(LED_1_2_3_4_6_PORT, LED_1_PIN, 4);
 8000d2e:	2204      	movs	r2, #4
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <EXTI4_IRQHandler+0x38>)
 8000d36:	f7ff fed9 	bl	8000aec <BlinkLed>
		}
		//xóa cờ ngắt sau khi thực hiện xong chương trình ngắt.
		EXTI_ClearITPendingBit(EXTI_Line4);
 8000d3a:	2010      	movs	r0, #16
 8000d3c:	f7ff fbd8 	bl	80004f0 <EXTI_ClearITPendingBit>
	}
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020800 	.word	0x40020800

08000d4c <EXTI9_5_IRQHandler>:
 * @brief  EXTI9_5_IRQHandler
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line5) != RESET)
 8000d50:	2020      	movs	r0, #32
 8000d52:	f7ff fbb3 	bl	80004bc <EXTI_GetITStatus>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00d      	beq.n	8000d78 <EXTI9_5_IRQHandler+0x2c>
	{

		BlinkLed(LED_1_2_3_4_6_PORT, LED_2_PIN, 4);
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	2101      	movs	r1, #1
 8000d60:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <EXTI9_5_IRQHandler+0x78>)
 8000d62:	f7ff fec3 	bl	8000aec <BlinkLed>
		BlinkLed(LED_1_2_3_4_6_PORT, LED_3_PIN, 4);
 8000d66:	2204      	movs	r2, #4
 8000d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6c:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <EXTI9_5_IRQHandler+0x78>)
 8000d6e:	f7ff febd 	bl	8000aec <BlinkLed>
		/* Clear the EXTI line 5 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line5);
 8000d72:	2020      	movs	r0, #32
 8000d74:	f7ff fbbc 	bl	80004f0 <EXTI_ClearITPendingBit>
	}

	if(EXTI_GetITStatus(EXTI_Line6) != RESET)
 8000d78:	2040      	movs	r0, #64	; 0x40
 8000d7a:	f7ff fb9f 	bl	80004bc <EXTI_GetITStatus>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d008      	beq.n	8000d96 <EXTI9_5_IRQHandler+0x4a>
	{
		BlinkLed(LED_1_2_3_4_6_PORT, LED_4_PIN, 4);
 8000d84:	2204      	movs	r2, #4
 8000d86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <EXTI9_5_IRQHandler+0x78>)
 8000d8c:	f7ff feae 	bl	8000aec <BlinkLed>
		/* Clear the EXTI line 6 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line6);
 8000d90:	2040      	movs	r0, #64	; 0x40
 8000d92:	f7ff fbad 	bl	80004f0 <EXTI_ClearITPendingBit>
	}

	if(EXTI_GetITStatus(EXTI_Line7) != RESET)
 8000d96:	2080      	movs	r0, #128	; 0x80
 8000d98:	f7ff fb90 	bl	80004bc <EXTI_GetITStatus>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00e      	beq.n	8000dc0 <EXTI9_5_IRQHandler+0x74>
	{
		BlinkLed(LED_5_PORT, LED_5_PIN, 4);
 8000da2:	2204      	movs	r2, #4
 8000da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <EXTI9_5_IRQHandler+0x7c>)
 8000daa:	f7ff fe9f 	bl	8000aec <BlinkLed>
		BlinkLed(LED_1_2_3_4_6_PORT, LED_6_PIN, 4);
 8000dae:	2204      	movs	r2, #4
 8000db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <EXTI9_5_IRQHandler+0x78>)
 8000db6:	f7ff fe99 	bl	8000aec <BlinkLed>
		/* Clear the EXTI line 7 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line7);
 8000dba:	2080      	movs	r0, #128	; 0x80
 8000dbc:	f7ff fb98 	bl	80004f0 <EXTI_ClearITPendingBit>
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dd0:	f7ff f9fe 	bl	80001d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	; (8000e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	; (8000e18 <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dfa:	f000 f811 	bl	8000e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfe:	f7ff ff74 	bl	8000cea <main>

08000e02 <LoopForever>:

LoopForever:
    b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   r0, =_estack
 8000e04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e10:	08000e88 	.word	0x08000e88
  ldr r2, =_sbss
 8000e14:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e18:	20000028 	.word	0x20000028

08000e1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <__libc_init_array>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	4d0d      	ldr	r5, [pc, #52]	; (8000e58 <__libc_init_array+0x38>)
 8000e24:	4c0d      	ldr	r4, [pc, #52]	; (8000e5c <__libc_init_array+0x3c>)
 8000e26:	1b64      	subs	r4, r4, r5
 8000e28:	10a4      	asrs	r4, r4, #2
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	42a6      	cmp	r6, r4
 8000e2e:	d109      	bne.n	8000e44 <__libc_init_array+0x24>
 8000e30:	4d0b      	ldr	r5, [pc, #44]	; (8000e60 <__libc_init_array+0x40>)
 8000e32:	4c0c      	ldr	r4, [pc, #48]	; (8000e64 <__libc_init_array+0x44>)
 8000e34:	f000 f818 	bl	8000e68 <_init>
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	10a4      	asrs	r4, r4, #2
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	42a6      	cmp	r6, r4
 8000e40:	d105      	bne.n	8000e4e <__libc_init_array+0x2e>
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
 8000e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e48:	4798      	blx	r3
 8000e4a:	3601      	adds	r6, #1
 8000e4c:	e7ee      	b.n	8000e2c <__libc_init_array+0xc>
 8000e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e52:	4798      	blx	r3
 8000e54:	3601      	adds	r6, #1
 8000e56:	e7f2      	b.n	8000e3e <__libc_init_array+0x1e>
 8000e58:	08000e80 	.word	0x08000e80
 8000e5c:	08000e80 	.word	0x08000e80
 8000e60:	08000e80 	.word	0x08000e80
 8000e64:	08000e84 	.word	0x08000e84

08000e68 <_init>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	bf00      	nop
 8000e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6e:	bc08      	pop	{r3}
 8000e70:	469e      	mov	lr, r3
 8000e72:	4770      	bx	lr

08000e74 <_fini>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr
